1.开发板原理图
2.CortexM3与M4权威指南，作为平时的一种积累，当用到某一模块部分时详查即可
（如果英文有难度可以看CortexM3权威指南（中文版），内容大致相似）
3.STM32F4XX参考手册是关于其中一些资源配置相关的，控制器和内部资源




/**********软件开发********/
1.创建工程不需要添加.h文件
2.加模板的方法Configuration——>TextComplextion
3.keil Project 里面的分组都是单级的

4.Options——>target 中选择使用微库





/*******启动代码的作用*********/
1.初始化堆和栈
2.配置系统时钟
3.定义中断向量表
4.所有CPU启动都需要启动代码
5.Cortex-m内核的CPU其中断向量表地址是固定的
6.STM32F4系列CPU的启动代码初始化了堆栈

7.    Cortex M3的内核有三种启动方式，其分别是：
  A.通过boot引脚设置可以将中断向量表定位于SRAM区，即起始地址为0x2000000，同时复位后PC指针位于0x2000000处；
  B.通过boot引脚设置可以将中断向量表定位于FLASH区，即起始地址为0x8000000，同时复位后PC指针位于0x8000000处；
  C.通过boot引脚设置可以将中断向量表定位于内置Bootloader区
8.   启动过程总结：首先对栈和堆的大小进行定义，并在代码区的起始处建立中断向量表，
  其第一个表项是栈顶地址，第二个表项是复位中断服务入口地址。然后在复位中断服务程
  序中跳转¬¬C/C++标准实时库的__main函数，完成用户堆栈等的初始化后，跳转.c文件中
  的main函数开始执行C程序。假设STM32被设置为从内部FLASH启动（这也是最常见的一种情况），
  中断向量表起始地位为0x8000000，则栈顶地址存放于0x8000000处，而复位中断服务入口地址
  存放于0x8000004处。当STM32遇到复位信号后，则从0x80000004处取出复位中断服务入口地址，
  继而执行复位中断服务程序，然后跳转__main函数，最后进入mian函数，来到C的世界！！
